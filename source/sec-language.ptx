<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-section-language" >
  <title>The language of set theory</title>

  <p>Our official version of the language of set theory will consist of a only a very few symbols
     together with some basic rules for how these symbols may be concatenated.  We will augment
     this language to make reading more comprehensible, but when we need to prove something
     about all formulas in our language, it is convenient to have a short official list.
  </p>

  <definition xml:id="def-language">
    <statement>
      <p>
       The language of set theory, denoted <m>\lst</m>, consists of the following symbols:
      </p>
      <p>
        connectives <m>\quad\wedge</m> and <m>\neg</m>
      </p>
      <p>
        quantifier  <m>\quad\forall</m>
      </p>
      <p>
        variables  <m>\quad v_0, v_1, v_2, \dots</m>,
      </p>
      <p>
        parentheses   <m>\quad (\quad</m> and <m>\quad)</m>,
      </p>
      <p>
        the equality symbol  <m>\quad=</m>, and
      </p>
      <p>
       the membership symbol  <m>\quad\in</m>.
      </p>
    </statement>
  </definition>

  <p>
    Given our list of allowed symbols, the meaningful statements that can be expressed in our language are produced as follows:
  </p>

<definition xml:id="def-formula">
  <statement>
    <p>
    <ol>
      <li>
        <p>
          An <em>expression</em> in the language of set theory is defined to be any finite string built from the symbols of <m>\lst</m>
        </p>
      </li>
      <li>
        <p>
          We define a <em>formula</em> of the language of set theory to any expression generated
           using the following rules:
        <ul> 
        <li>
        <p>
          <m>(v_i\in v_j)</m> and <m>(v_i=v_j)</m> are formulas (called <em>atomic</em> formulas) for any <m>i</m> and <m>j</m>
          </p>
        </li>
          <li>
          <p>
            If <m>\phi</m> and <m>\psi</m> are formulas then so are <m>(\phi\wedge\psi)</m> and <m>(\neg\phi)</m>
          </p>
         </li>
         <li>
           <p>
             If <m>\phi</m> is a formula then so is <m>(\forall v_i\phi)</m> for any <m>i</m>.
           </p>
         </li>
        </ul>
      </p>
      </li>
      <li>
        <p>
          We let <m>\Form_{\lst}</m> denote the collection of formulas of <m>\lst</m> defined above.
        </p>
      </li>
    </ol>
    </p>
  </statement>
</definition> 



<p>The above is our official way of building formulas, but of course expressing meaningful concepts in this 
limited vocabulary quickly becomes unmanageable. Thus, our first augmentation of the official language is to add to it symbols for the other standard ingredients of first order logic.
</p>
<p>
<ul>
    <li>
      <m>(\phi\vee\psi)</m> abbreviates <m>(\neg((\neg\phi)\wedge(\neg\psi)))</m>
    </li>
    <li>
      <m>(\phi\rightarrow\psi)</m> abbreviates <m>((\neg\phi)\vee\psi)</m>
    </li>
    <li>
      <m>(\phi\leftrightarrow\psi)</m> abbreviates <m>((\phi\rightarrow\psi)\vee(\psi\rightarrow\phi))</m>
    </li>
    <li>
    <m>(\exists v_i\phi)</m> abbreviates <m>(\neg(\forall v_i(\neg\phi)))</m>
    </li>
    <li>
    <m>(v_i\neq v_j)</m> abbreviates <m>(\neg(v_i=v_j))</m>
  </li>
  <li>
      <m>(v_i\notin v_j)</m> abbreviates <m>(\neg(v_i\in v_j))</m>
  </li>
  <li>
    <m>(\exists v_i\in v_j)\phi</m> abbreviates <m>(\exists v_i((v_i\in v_j)\wedge \phi))</m>
  </li>
  <li>
    <m>(\forall v_i\in v_j)\phi</m> abbreviates <m>(\forall v_j((v_j\in v_i)\rightarrow\phi))</m>
  </li>
</ul>
</p>

<p>All of the above symbols are officially just abbreviations for expressions
  written in the official language of set theory, but we do grant them a 
  semi-official status.  This means that we will deploy them unabashedly in expressions, while
  often restricting ourselves to the official language when building definitions or proofs that rely
  on the way formulas are built up out the atomic formulas.. The expectation
  is that readers can extend things to cover these semi-official symbols without much trouble, as we illustrate
  with the following definition and subsequent discussion.
</p>

<definition xml:id="def-subformula">
  <title>Subformulas</title>
  <statement>
    <p>
      By recursion we define a function <m>\subform</m> that assigned to each formula <m>\phi</m> of <m>\lst</m> the set <m>\subform(\phi)</m> of all of its <em>subformulas</em> 
      <ul>
        <li>
         If <m>\phi</m> is an atomic formula, then <m>\subform(\phi)=\phi</m>
        </li>
        <li>
       <m>\subform((\phi\wedge\psi))=\subform(\phi)\cup \subform(\psi)\cup\{(\phi\wedge\psi)\}</m>
        </li>
        <li>
        <m>\subform((\neg\phi))=\subform(\phi)\cup\{(\neg\phi)\}</m>
        </li>
        <li>
        <m>\subform((\forall v_i\phi))=\subform(\phi)\cup\{(\forall v_i\phi)\}</m>
        </li>
      </ul>
    </p>
  </statement>
</definition>

<p>
The above function takes as input a formula <m>\phi</m> of<m>\lst</m> and returns the collection of all the formulas of <m>\lst</m> that are used to build <m>\phi</m>. 
If we work with formulas that involve our semi-official symbols like <m>\exists</m> or 
<m>\leftrightarrow</m>, then we can extend the notion of subformulas in the obvious way
 to cover their use as well. 
</p>
<definition>
  <title>Free and Bound Variables</title>
<statement>
<p>
<ol>
  <li>
    <p>
      The <term>range</term> of an occurence of a quantifier <m>\forall v_i</m> in a formula <m>\phi</m>
      is the unique subformula <m>(\forall v_i\psi)</m> of <m>\phi</m> beginning with
      the occurence in question.
    </p>
  </li>
  <li>
    <p>
    An occurence of a variable <m>v_i</m> in a formula is <term>bound</term>
    if it is within the range of a quantifier of the form <m>\forall v_i</m>. Otherwise
    the occurence is <term>free</term>.
    </p>
  </li>
  <li>
    <p>
      A formula without free variables is called a <term>sentence</term>, and we 
      let <m>\Sent_{\lst}</m> denote the collection of sentences in our language <m>\lst</m>.
    </p>
  </li>
</ol>
</p>
</statement>
</definition>
</section>